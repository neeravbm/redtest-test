<?php
/**
 * Created by PhpStorm.
 * User: neeravm
 * Date: 11/26/14
 * Time: 5:32 PM
 */

/**
 * @file
 *
 * Contains functions that modify Drupal's default behavior so that it can be
 *   easily tested using PHPUnit.
 */

/**
 * Implements hook_element_info_alter().
 */
function phpunit_helper_element_info_alter(&$type) {
  if (isset($type['managed_file']['#value_callback']) && $type['managed_file']['#value_callback'] == 'file_managed_file_value') {
    // Change #value_callback for managed file widget. This is needed because it
    // calls is_uploaded_file() function on line 1469 of file.inc. While running
    // PHPUnit tests, this will always return FALSE which means that form
    // validation will show errors. Instead we upload the file programmatically
    // before submitting the form and provide fid to the form. This work because
    // code on line 514 of file.module takes care of it.
    $type['managed_file']['#value_callback'] = 'phpunit_helper_managed_file_value';
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function phpunit_helper_field_widget_form_alter(
  &$element,
  &$form_state,
  $context
) {
  if ($context['field']['type'] == 'file') {
    foreach ($element as $key => $val) {
      if (!empty($val['#value_callback']) && $val['#value_callback'] == 'file_field_widget_value') {
        $element[$key]['#value_callback'] = 'phpunit_helper_field_widget_value';
      }
    }
  }
}

/**
 * The #value_callback for a managed_file type element. This is a copy of
 * file_managed_file_value() function in file.module. The only difference is
 * that file_managed_file_save_upload() function has been replaced by
 * phpunit_helper_managed_file_save_upload() function.
 */
function phpunit_helper_managed_file_value(
  &$element,
  $input = FALSE,
  $form_state = NULL
) {
  $fid = 0;

  // Find the current value of this field from the form state.
  $form_state_fid = $form_state['values'];
  foreach ($element['#parents'] as $parent) {
    $form_state_fid = isset($form_state_fid[$parent]) ? $form_state_fid[$parent] : 0;
  }

  if ($element['#extended'] && isset($form_state_fid['fid'])) {
    $fid = $form_state_fid['fid'];
  }
  elseif (is_numeric($form_state_fid)) {
    $fid = $form_state_fid;
  }

  // Process any input and save new uploads.
  if ($input !== FALSE) {
    $return = $input;

    // Uploads take priority over all other values.
    if ($file = phpunit_helper_managed_file_save_upload($element)) {
      $fid = $file->fid;
    }
    else {
      // Check for #filefield_value_callback values.
      // Because FAPI does not allow multiple #value_callback values like it
      // does for #element_validate and #process, this fills the missing
      // functionality to allow File fields to be extended through FAPI.
      if (isset($element['#file_value_callbacks'])) {
        foreach ($element['#file_value_callbacks'] as $callback) {
          $callback($element, $input, $form_state);
        }
      }
      // Load file if the FID has changed to confirm it exists.
      if (isset($input['fid']) && $file = file_load($input['fid'])) {
        $fid = $file->fid;
      }
    }
  }

  // If there is no input, set the default value.
  else {
    if ($element['#extended']) {
      $default_fid = isset($element['#default_value']['fid']) ? $element['#default_value']['fid'] : 0;
      $return = isset($element['#default_value']) ? $element['#default_value'] : array('fid' => 0);
    }
    else {
      $default_fid = isset($element['#default_value']) ? $element['#default_value'] : 0;
      $return = array('fid' => 0);
    }

    // Confirm that the file exists when used as a default value.
    if ($default_fid && $file = file_load($default_fid)) {
      $fid = $file->fid;
    }
  }

  $return['fid'] = $fid;

  return $return;
}

/**
 * Saves any files that have been uploaded into a managed_file element. This
 * function is a copy of file_managed_file_save_upload() function. The only
 * difference is that we are not uploading the file. We are assuming that
 * PHPUnit test code will upload the file and provide fid directly.
 *
 * @param $element
 *   The FAPI element whose values are being saved.
 *
 * @return
 *   The file object representing the file that was saved, or FALSE if no file
 *   was saved. In our case, it will always return FALSE since we are not
 *   saving the file in this function.
 */
function phpunit_helper_managed_file_save_upload($element) {
  $upload_name = implode('_', $element['#parents']);
  if (empty($_FILES['files']['name'][$upload_name])) {
    return FALSE;
  }

  $destination = isset($element['#upload_location']) ? $element['#upload_location'] : NULL;
  if (isset($destination) && !file_prepare_directory(
      $destination,
      FILE_CREATE_DIRECTORY
    )
  ) {
    watchdog(
      'file',
      'The upload directory %directory for the file field !name could not be created or is not accessible. A newly uploaded file could not be saved in this directory as a consequence, and the upload was canceled.',
      array('%directory' => $destination, '!name' => $element['#field_name'])
    );
    form_set_error($upload_name, t('The file could not be uploaded.'));

    return FALSE;
  }

  if (!$file = file_save_upload($upload_name, $element['#upload_validators'], $destination)) {
    /*watchdog('file', 'The file upload failed. %upload', array('%upload' => $upload_name));
    form_set_error($upload_name, t('The file in the !name field was unable to be uploaded.', array('!name' => $element['#title'])));*/
    return FALSE;
  }

  return $file;
}

/**
 * The #value_callback for the file_generic field element. This is a copy of
 * file_field_widget_value() function except that file_managed_file_value()
 * function call is replaced by phpunit_helper_managed_file_value() function
 * call.
 */
function phpunit_helper_field_widget_value(
  $element,
  $input = FALSE,
  $form_state
) {
  if ($input) {
    // Checkboxes lose their value when empty.
    // If the display field is present make sure its unchecked value is saved.
    $field = field_widget_field($element, $form_state);
    if (empty($input['display'])) {
      $input['display'] = $field['settings']['display_field'] ? 0 : 1;
    }
  }

  // We depend on the managed file element to handle uploads.
  $return = phpunit_helper_managed_file_value($element, $input, $form_state);

  // Ensure that all the required properties are returned even if empty.
  $return += array(
    'fid' => 0,
    'display' => 1,
    'description' => '',
  );

  return $return;
}